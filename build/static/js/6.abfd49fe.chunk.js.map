{"version":3,"sources":["request/http.js","store/middleware/business.js","request/api/content/home/home.js","store/createAction/business.js","view/content/home/Home.js"],"names":["axios1","axios","create","getQuery","url","params","Promise","resolve","reject","get","then","res","data","catch","err","error","getRestful","id","post","remove","delete","defaults","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","response","status","code","msg","clear","store","dispatch","setCurrentTwoMenuPathA","setCurrentOneMenuPathA","setMenuDataA","setTimeout","window","location","replace","getCommonDataOneM","getState","commonDataOne","result","type","types","Home","memo","history","useHistory","useDispatch","useSelector","state","shallowEqual","useEffect","onClick","push"],"mappings":"sSASMA,EAASC,IAAMC,SA2Ed,SAASC,EAASC,EAAKC,GAC5B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BR,EAAOS,IAAIL,EAAK,CACdC,WACCK,MAAK,SAAAC,GACNJ,EAAQI,EAAIC,SACXC,OAAM,WAAmB,IAAlBC,EAAiB,uDAAX,2BACd,IAAQC,MAAMD,GACdN,EAAOM,SAUN,SAASE,EAAWZ,EAAKC,GAC9B,IACEY,EACEZ,EADFY,GAEF,OAAO,IAAIX,SAAQ,SAACC,EAASC,GAC3BR,EAAOS,IAAP,UAAcL,EAAd,YAAqBa,IAAMP,MAAK,SAAAC,GAC9BJ,EAAQI,EAAIC,SACXC,OAAM,WAAmB,IAAlBC,EAAiB,uDAAX,2BACd,IAAQC,MAAMD,GACdN,EAAOM,SAUN,SAASI,EAAKd,EAAKC,GACxB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BR,EAAOkB,KAAKd,EAAKC,GACdK,MAAK,SAAAC,GACJJ,EAAQI,EAAIC,SACXC,OAAM,WAAmB,IAAlBC,EAAiB,uDAAX,2BACd,IAAQC,MAAMD,GACdN,EAAOM,SA2BR,SAASK,EAAOf,EAAKC,GAC1B,IAAQY,EAAOZ,EAAPY,GACR,OAAO,IAAIX,SAAQ,SAACC,EAASC,GAC3BR,EAAOoB,OAAP,UAAiBhB,EAAjB,YAAwBa,IAAMP,MAAK,SAAAC,GACjCJ,EAAQI,EAAIC,SACXC,OAAM,WAAmB,IAAlBC,EAAiB,uDAAX,2BACd,IAAQC,MAAMD,GACdN,EAAOM,SAnJXd,EAAOqB,SAASC,QAAU,GAE5BtB,EAAOqB,SAASE,QAAU,IAC1BvB,EAAOqB,SAASG,QAAQN,KAAK,gBAAkB,sEAG/ClB,EAAOyB,aAAaC,QAAQC,KAC1B,SAAAC,GAGE,IAAMC,EAAQC,aAAaC,QAAQ,SAGnC,OADAF,IAAUD,EAAOJ,QAAQK,MAAQA,GAC1BD,KAET,SAAAb,GACE,OAAOT,QAAQS,MAAMA,MAIzBf,EAAOyB,aAAaO,SAASL,KAC3B,SAACK,GAEC,GAAwB,MAApBA,EAASC,OACX,OAAQD,EAASpB,KAAKsB,MAEpB,KAAK,EACH,OAAO5B,QAAQC,QAAQyB,GAGzB,KAAK,IACH,OAAO1B,QAAQE,OAAOwB,EAASpB,KAAKuB,KAGtC,KAAK,IAWH,OATAL,aAAaM,QACbC,IAAMC,SAASC,YAAuB,kBACtCF,IAAMC,SAASE,YAAuB,KACtCH,IAAMC,SAASG,YAAa,KAE5BC,YAAW,WACTC,OAAOC,SAASC,QAAhB,YACC,KAEIvC,QAAQE,OAAOwB,EAASpB,KAAKuB,KAGtC,QACE,GAAIH,EAASpB,KAAKsB,KAEhB,OAAO5B,QAAQE,OAAOwB,EAASpB,KAAKuB,SAM9C,SAACpB,GACC,GAAIA,EACF,OAAOT,QAAQE,OAAOO,EAAMiB,c,wGCrE3B,IAAMc,EAAoB,SAACR,EAAUS,GCHrC,IAA2B1C,EACzBF,YAAS,cAAeE,GDGXK,MAAK,SAAAC,GEJpB,IAA2BqC,EFK9BV,GEL8BU,EFKHrC,EAAIsC,OEJ1B,CACLC,KAAMC,IACNH,uB,OCKEI,EAAOC,gBAAK,WAChB,IAAMC,EAAUC,cAEVjB,EAAWkB,cAETR,EAAkBS,aAAY,SAACC,GACrC,MAAO,CACLV,cAAeU,EAAMjD,IAAI,YAAYA,IAAI,qBAE1CkD,KAJKX,cAWR,OALAY,qBAAU,WACRtB,EAASQ,KACR,CAACR,IAIF,gCACGU,EACD,mBAAQa,QAAS,WAAQP,EAAQQ,KAAK,uBAAtC,4CAKSV","file":"static/js/6.abfd49fe.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nimport { message } from 'antd';\r\n\r\nimport store from '@/store'\r\n\r\nimport { setCurrentOneMenuPathA, setCurrentTwoMenuPathA, setMenuDataA } from '@/store/createAction/frameWork.js'\r\n\r\n// 创建axios实例\r\nconst axios1 = axios.create()\r\n\r\n// 环境的切换\r\nif (process.env.NODE_ENV === 'development') {\r\n  axios1.defaults.baseURL = 'http://localhost:3001'\r\n} else if (process.env.NODE_ENV === 'production') {\r\n  axios1.defaults.baseURL = ''\r\n}\r\naxios1.defaults.timeout = 10000\r\naxios1.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8;multipart/form-data'\r\n\r\n// 请求拦截器\r\naxios1.interceptors.request.use(\r\n  config => {\r\n    // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\r\n    // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\r\n    const token = localStorage.getItem('token')\r\n\r\n    token && (config.headers.token = token)\r\n    return config\r\n  },\r\n  error => {\r\n    return Promise.error(error)\r\n  })\r\n\r\n// 响应拦截器 code只是案例 具体code结合后端来定\r\naxios1.interceptors.response.use(\r\n  (response) => {\r\n    // 网络层200\r\n    if (response.status === 200) {\r\n      switch (response.data.code) {\r\n        // 成功\r\n        case 0:\r\n          return Promise.resolve(response)\r\n\r\n        // 账号或密码错误\r\n        case 500:\r\n          return Promise.reject(response.data.msg)\r\n\r\n        // token失效\r\n        case 401:\r\n\r\n          localStorage.clear()\r\n          store.dispatch(setCurrentTwoMenuPathA('/content/home'))\r\n          store.dispatch(setCurrentOneMenuPathA(''))\r\n          store.dispatch(setMenuDataA([]))\r\n\r\n          setTimeout(() => {\r\n            window.location.replace(`/login`)\r\n          }, 1000)\r\n\r\n          return Promise.reject(response.data.msg)\r\n\r\n        // 其他非0状态\r\n        default:\r\n          if (response.data.code) {\r\n            // 其他错误\r\n            return Promise.reject(response.data.msg)\r\n          }\r\n      }\r\n    }\r\n  },\r\n  // 网络层状态码不是200的情况\r\n  (error) => {\r\n    if (error) {\r\n      return Promise.reject(error.response)\r\n    }\r\n  }\r\n)\r\n\r\n/**\r\n * get方法，对应get请求 query\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function getQuery(url, params) {\r\n  return new Promise((resolve, reject) => {\r\n    axios1.get(url, {\r\n      params\r\n    }).then(res => {\r\n      resolve(res.data)\r\n    }).catch((err = \"网络出错\") => {\r\n      message.error(err);\r\n      reject(err)\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * get方法，对应get请求 restful\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function getRestful(url, params) {\r\n  const {\r\n    id\r\n  } = params\r\n  return new Promise((resolve, reject) => {\r\n    axios1.get(`${url}/${id}`).then(res => {\r\n      resolve(res.data)\r\n    }).catch((err = \"网络出错\") => {\r\n      message.error(err);\r\n      reject(err)\r\n    })\r\n  })\r\n}\r\n\r\n/**\r\n * post方法，对应post请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function post(url, params) {\r\n  return new Promise((resolve, reject) => {\r\n    axios1.post(url, params)\r\n      .then(res => {\r\n        resolve(res.data)\r\n      }).catch((err = \"网络出错\") => {\r\n        message.error(err);\r\n        reject(err)\r\n      })\r\n  })\r\n}\r\n\r\n/**\r\n * put方法，对应put请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function put(url, params) {\r\n  return new Promise((resolve, reject) => {\r\n    axios1.put(url, params)\r\n      .then(res => {\r\n        resolve(res.data)\r\n      }).catch((err = \"网络出错\") => {\r\n        message.error(err);\r\n        reject(err)\r\n      })\r\n  })\r\n}\r\n\r\n/**\r\n * delete方法，对应delete请求 \r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function remove(url, params) {\r\n  const { id } = params\r\n  return new Promise((resolve, reject) => {\r\n    axios1.delete(`${url}/${id}`).then(res => {\r\n      resolve(res.data)\r\n    }).catch((err = \"网络出错\") => {\r\n      message.error(err);\r\n      reject(err)\r\n    })\r\n  })\r\n}","\r\nimport { getCommonDataOneH } from '@/request/api/content/home/home'\r\n\r\nimport { getCommonDataOneA } from '../createAction/business'\r\n\r\nexport const getCommonDataOneM = (dispatch, getState) => {\r\n  getCommonDataOneH().then(res => {\r\n    dispatch(getCommonDataOneA(res.result))\r\n  })\r\n}\r\n","import { getQuery } from '@/request/http.js'\r\n\r\nexport function getCommonDataOneH(params) {\r\n  return getQuery('/commonData', params)\r\n}","import * as types from '../const/business'\r\n\r\nexport function getCommonDataOneA(commonDataOne) {\r\n  return {\r\n    type: types.GET_COMMON_DATA_ONE,\r\n    commonDataOne\r\n  }\r\n}","import React, { memo, useEffect } from 'react';\r\n\r\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { Button } from 'antd';\r\n\r\nimport { getCommonDataOneM } from '@/store/middleware/business'\r\n\r\nconst Home = memo(() => {\r\n  const history = useHistory()\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const { commonDataOne } = useSelector((state) => {\r\n    return {\r\n      commonDataOne: state.get('business').get('commonDataOneR')\r\n    }\r\n  }, shallowEqual)\r\n\r\n  useEffect(() => {\r\n    dispatch(getCommonDataOneM)\r\n  }, [dispatch])\r\n\r\n\r\n  return (\r\n    <div>\r\n      {commonDataOne}\r\n      <Button onClick={() => { history.push('/content/home/Test') }}>点我一下</Button>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Home;"],"sourceRoot":""}